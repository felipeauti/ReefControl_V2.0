GUIA COMPLETO PARA IMPLEMENTACAO DE PERSISTENCIA DE SENSORES DS18B20
================================================================================

CONTEXTO INICIAL:
- Sistema ReefControl com ESP32 Pro e ESP8266 Compact
- Sensores DS18B20 OneWire para temperatura
- Necessidade de persistir configuracoes dos sensores (nome, offset de calibracao)
- Sistema deve funcionar apos reinicializacoes

RACIOCINIO LOGICO PARA A IMPLEMENTACAO:
================================================================================

1. ANALISE DO PROBLEMA:
   - Sensores DS18B20 tem enderecos unicos OneWire (8 bytes)
   - Usuarios querem dar nomes amigaveis aos sensores
   - Calibracao com offset deve ser mantida
   - Apos reinicializacao, sistema deve lembrar das configuracoes

2. DECISOES ARQUITETURAIS:
   - Usar JSON para armazenar dados (legivel e flexivel)
   - Salvar em arquivo no sistema de arquivos (SPIFFS/LittleFS)
   - Estrutura de dados em memoria para acesso rapido
   - Metodos separados para salvar/carregar (single responsibility)

3. ESTRUTURA DE DADOS ESCOLHIDA:
   - Array de estruturas DS18B20Sensor para armazenamento em memoria
   - JSON com array de objetos para persistencia
   - Cada sensor tem: endereco, nome, offset, temperatura, status

IMPLEMENTACAO PASSO A PASSO:
================================================================================

PASSO 1: CRIAR ARQUIVO DE CONSTANTES
================================================================================
Arquivo: src/core/Constants.h

RACIOCINIO: Centralizar constantes evita numeros magicos no codigo e facilita manutencao.

CONTEUDO COMPLETO:
```cpp
#ifndef CONSTANTS_H
#define CONSTANTS_H

// Constantes para sensores DS18B20
#define MAX_DS18B20_SENSORS 4  // Maximo de sensores DS18B20 suportados
#define MAX_SENSORS 8  // Maximo total de sensores suportados

// Constantes para sistema de logs
#define MAX_LOG_ENTRIES 100  // Maximo de entradas no buffer de logs
#define MAX_LOG_LENGTH 128   // Tamanho maximo de cada entrada de log

// Tipos de log
enum LogType {
    LOG_INFO,
    LOG_SUCCESS,
    LOG_WARNING,
    LOG_ERROR
};

#endif // CONSTANTS_H
```

PASSO 2: MODIFICAR SENSORMANAGER.H
================================================================================
Arquivo: src/core/SensorManager.h

RACIOCINIO: 
- Adicionar estrutura DS18B20Sensor para representar cada sensor
- Incluir ArduinoJson para serializacao
- Incluir sistema de arquivos (SPIFFS/LittleFS)
- Metodos privados para persistencia (encapsulamento)
- Metodos publicos para gerenciamento de sensores

ALTERACOES ESPECIFICAS:

1. ADICIONAR INCLUDES NO TOPO:
```cpp
#include <ArduinoJson.h>

#ifdef ESP32
  #include <SPIFFS.h>
  #define FileSystemClass SPIFFS
#else
  #include <LittleFS.h>
  #define FileSystemClass LittleFS
#endif
```

2. ADICIONAR ESTRUTURA DS18B20SENSOR APOS AS OUTRAS STRUCTS:
```cpp
// Estrutura para sensor DS18B20
struct DS18B20Sensor {
  DeviceAddress address;  // Endereco OneWire do sensor
  String name;           // Nome amigavel do sensor (ex: "Aquario")
  float temperature;     // Ultima temperatura lida
  float rawTemperature;  // Temperatura raw
  float offset;         // Offset de calibracao
  bool isValid;         // Status do sensor
  unsigned long lastRead; // Ultima leitura
};
```

3. ADICIONAR MEMBROS PRIVADOS NA CLASSE:
```cpp
private:
  // Array de sensores DS18B20
  static const int MAX_DS18B20_SENSORS = 4;  // Maximo de 4 sensores
  DS18B20Sensor _ds18b20Sensors[MAX_DS18B20_SENSORS];
  int _numDS18B20Sensors = 0;  // Numero atual de sensores
  
  // Metodos para persistencia
  bool saveSensorsToFile();
  bool loadSensorsFromFile();
```

4. ADICIONAR METODOS PUBLICOS:
```cpp
public:
  // Metodos para gerenciar sensores DS18B20
  bool addDS18B20Sensor(const String& address, const String& name);
  bool removeDS18B20Sensor(const String& address);
  DS18B20Sensor* getDS18B20Sensor(const String& address);
  String getDS18B20SensorsJson() const;
  void calibrateDS18B20Sensor(const String& address, float measuredTemp);
  void resetDS18B20Calibration(const String& address);
```

PASSO 3: IMPLEMENTAR METODOS NO SENSORMANAGER.CPP
================================================================================
Arquivo: src/core/SensorManager.cpp

RACIOCINIO:
- Metodo begin() deve carregar sensores salvos na inicializacao
- saveSensorsToFile() converte estruturas para JSON e salva
- loadSensorsFromFile() carrega JSON e reconstroi estruturas
- Metodos de gerenciamento chamam persistencia automaticamente
- Logs detalhados para debug

IMPLEMENTACOES COMPLETAS:

1. MODIFICAR O METODO BEGIN():
```cpp
bool SensorManager::begin(ConfigManager* config) {
    _config = config;
    
    // Inicializa o sistema de arquivos
    if (!FileSystemClass.begin()) {
        Serial.println("‚ùå Erro ao inicializar sistema de arquivos!");
        return false;
    }
    
    Serial.println("\nüå°Ô∏è Inicializando sensores de temperatura...");
    Serial.printf("üìç Pino OneWire: GPIO%d\n", ONE_WIRE_BUS);
    
    // Inicializa o sensor OneWire
    _tempSensor.begin();
    delay(100); // Pequeno delay para estabilizar
    _tempSensor.setResolution(12); // Configura resolucao para 12 bits (0.0625¬∞C)
    
    // Carrega os sensores salvos
    if (!loadSensorsFromFile()) {
        Serial.println("‚ö†Ô∏è Nenhum sensor salvo encontrado.");
    }
    
    // Carrega o offset do ConfigManager
    if (_config) {
        _data.tempOffset = _config->sensor.tempOffset;
        Serial.printf("üì• Offset de temperatura carregado: %.2f¬∞C\n", _data.tempOffset);
    }
    
    Serial.println("‚úÖ Sensores inicializados");
    return true;
}
```

2. IMPLEMENTAR METODO SAVESENSORSTOFILE():
```cpp
bool SensorManager::saveSensorsToFile() {
    DynamicJsonDocument doc(1024);
    JsonArray sensors = doc.createNestedArray("sensors");

    for(int i=0; i<_numDS18B20Sensors; i++) {
        JsonObject sensor = sensors.createNestedObject();
        
        // Converte o endereco para string
        String address = "";
        for (uint8_t j = 0; j < 8; j++) {
            if (_ds18b20Sensors[i].address[j] < 16) address += "0";
            address += String(_ds18b20Sensors[i].address[j], HEX);
        }
        
        sensor["address"] = address;
        sensor["name"] = _ds18b20Sensors[i].name;
        sensor["offset"] = _ds18b20Sensors[i].offset;
    }

    // Serializa o JSON para string primeiro (para debug)
    String jsonStr;
    serializeJsonPretty(doc, jsonStr);
    
    Serial.println("\nüíæ Salvando sensores em arquivo...");
    Serial.println("üìÑ Conteudo a ser salvo:");
    Serial.println(jsonStr);

    // Abre o arquivo para escrita
    File file = FileSystemClass.open("/sensors.json", "w");
    if (!file) {
        Serial.println("‚ùå Erro ao abrir arquivo para escrita!");
        return false;
    }

    // Serializa diretamente para o arquivo
    if (serializeJson(doc, file) == 0) {
        Serial.println("‚ùå Erro ao escrever no arquivo!");
        file.close();
        return false;
    }

    file.close();
    Serial.printf("‚úÖ %d sensor(es) salvo(s) com sucesso!\n", _numDS18B20Sensors);
    return true;
}
```

3. IMPLEMENTAR METODO LOADSENSORSFROMFILE():
```cpp
bool SensorManager::loadSensorsFromFile() {
    // Verifica se o arquivo existe
    if (!FileSystemClass.exists("/sensors.json")) {
        Serial.println("‚ö†Ô∏è Arquivo de sensores nao encontrado.");
        return false;
    }

    // Abre o arquivo para leitura
    File file = FileSystemClass.open("/sensors.json", "r");
    if (!file) {
        Serial.println("‚ùå Erro ao abrir arquivo para leitura!");
        return false;
    }

    // Le o conteudo do arquivo
    String jsonStr = file.readString();
    file.close();

    Serial.println("üìÑ Conteudo do arquivo sensors.json:");
    Serial.println(jsonStr);

    // Parse do JSON
    DynamicJsonDocument doc(1024);
    DeserializationError error = deserializeJson(doc, jsonStr);
    
    if (error) {
        Serial.print("‚ùå Erro ao fazer parse do JSON: ");
        Serial.println(error.c_str());
        return false;
    }

    // Limpa os sensores atuais
    _numDS18B20Sensors = 0;

    // Carrega os sensores do arquivo
    JsonArray sensors = doc["sensors"];
    for(JsonObject sensor : sensors) {
        String address = sensor["address"].as<String>();
        String name = sensor["name"].as<String>();
        float offset = sensor["offset"] | 0.0;

        Serial.printf("\nüì• Carregando sensor '%s'...\n", name.c_str());
        Serial.printf("üìç Endereco: %s\n", address.c_str());
        Serial.printf("üìä Offset: %.2f¬∞C\n", offset);

        // Converte o endereco string para bytes
        DeviceAddress addr;
        for(int i=0; i<8; i++) {
            addr[i] = strtoul(address.substring(i*2, i*2+2).c_str(), NULL, 16);
        }

        // Verifica se o sensor existe no barramento
        bool sensorFound = false;
        DeviceAddress tempAddr;
        for(int i=0; i<_tempSensor.getDeviceCount(); i++) {
            if(_tempSensor.getAddress(tempAddr, i)) {
                if(memcmp(addr, tempAddr, 8) == 0) {
                    sensorFound = true;
                    break;
                }
            }
        }

        if(sensorFound && _numDS18B20Sensors < MAX_DS18B20_SENSORS) {
            // Adiciona o sensor
            memcpy(_ds18b20Sensors[_numDS18B20Sensors].address, addr, 8);
            _ds18b20Sensors[_numDS18B20Sensors].name = name;
            _ds18b20Sensors[_numDS18B20Sensors].offset = offset;
            _ds18b20Sensors[_numDS18B20Sensors].temperature = 25.0;
            _ds18b20Sensors[_numDS18B20Sensors].rawTemperature = 25.0;
            _ds18b20Sensors[_numDS18B20Sensors].isValid = true;
            _ds18b20Sensors[_numDS18B20Sensors].lastRead = 0;
            _numDS18B20Sensors++;
            
            Serial.printf("‚úÖ Sensor '%s' carregado com sucesso!\n", name.c_str());
        } else if (!sensorFound) {
            Serial.printf("‚ö†Ô∏è Sensor '%s' nao encontrado no barramento - ignorando\n", name.c_str());
        } else {
            Serial.println("‚ö†Ô∏è Numero maximo de sensores atingido!");
            break;
        }
    }

    Serial.printf("\nüì• Total de %d sensor(es) carregado(s) do arquivo\n", _numDS18B20Sensors);
    return true;
}
```

CONTINUACAO NO PROXIMO BLOCO... 